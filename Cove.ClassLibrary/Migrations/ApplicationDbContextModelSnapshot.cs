// <auto-generated />
using System;
using Cove.ClassLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cove.ClassLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cove.ClassLibrary.Model.Assets", b =>
                {
                    b.Property<Guid>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("IssueNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IssueTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectedAgeSuitabilityId")
                        .HasColumnType("int");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadComicAssetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadComicThumbnailAssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublishMyComic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UploadComic");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComicAgeAvailabilityMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadComicAgeAvailabilityMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "All Ages"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Teen and Up"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Adult"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComicContentTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadComicContentTypeMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Blasphemy"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Character Death"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Explicit"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Gore"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Out Dated Ideals"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Racism"
                        },
                        new
                        {
                            Id = 7,
                            Value = "Rape / Non - consent"
                        },
                        new
                        {
                            Id = 8,
                            Value = "Self Harm"
                        },
                        new
                        {
                            Id = 9,
                            Value = "Sexism"
                        },
                        new
                        {
                            Id = 10,
                            Value = "Swearing"
                        },
                        new
                        {
                            Id = 11,
                            Value = "Violence"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComicFictionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadComicFictionMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Action / Adventure"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Chick Lit"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Classics"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Crime"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Detective"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Drama"
                        },
                        new
                        {
                            Id = 7,
                            Value = "Fairytale"
                        },
                        new
                        {
                            Id = 8,
                            Value = "Fantasy"
                        },
                        new
                        {
                            Id = 9,
                            Value = "Historical Fiction"
                        },
                        new
                        {
                            Id = 10,
                            Value = "Humour"
                        },
                        new
                        {
                            Id = 11,
                            Value = "LGBTQ"
                        },
                        new
                        {
                            Id = 12,
                            Value = "Mystery"
                        },
                        new
                        {
                            Id = 13,
                            Value = "Paranormalac"
                        },
                        new
                        {
                            Id = 14,
                            Value = "Political"
                        },
                        new
                        {
                            Id = 15,
                            Value = "Romance"
                        },
                        new
                        {
                            Id = 16,
                            Value = "Satire"
                        },
                        new
                        {
                            Id = 17,
                            Value = "Science Fiction"
                        },
                        new
                        {
                            Id = 18,
                            Value = "Spy"
                        },
                        new
                        {
                            Id = 19,
                            Value = "Superhero"
                        },
                        new
                        {
                            Id = 20,
                            Value = "Suspense"
                        },
                        new
                        {
                            Id = 21,
                            Value = "Thriller"
                        },
                        new
                        {
                            Id = 22,
                            Value = "Western"
                        },
                        new
                        {
                            Id = 23,
                            Value = "Women’s Fiction"
                        },
                        new
                        {
                            Id = 24,
                            Value = "War"
                        },
                        new
                        {
                            Id = 25,
                            Value = "Horror"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComicNonFictionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadComicNonFictionMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Art"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Autobiography"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Health / Fitness"
                        },
                        new
                        {
                            Id = 5,
                            Value = "History"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Home & Garden"
                        },
                        new
                        {
                            Id = 7,
                            Value = "LGBTQ"
                        },
                        new
                        {
                            Id = 8,
                            Value = "Memoir"
                        },
                        new
                        {
                            Id = 9,
                            Value = "Philosophy"
                        },
                        new
                        {
                            Id = 10,
                            Value = "Poetry"
                        },
                        new
                        {
                            Id = 11,
                            Value = "Religion / Spirituality"
                        },
                        new
                        {
                            Id = 12,
                            Value = "Review"
                        },
                        new
                        {
                            Id = 13,
                            Value = "Science"
                        },
                        new
                        {
                            Id = 14,
                            Value = "Self Help"
                        },
                        new
                        {
                            Id = 15,
                            Value = "Sports & Leisure"
                        },
                        new
                        {
                            Id = 16,
                            Value = "Travel"
                        },
                        new
                        {
                            Id = 17,
                            Value = "True Crime"
                        },
                        new
                        {
                            Id = 18,
                            Value = "War"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadComicTagTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadComicTagTypeMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Stand alone"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Mini Series"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Ongoing Story"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Anthology"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Graphic Novel"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Collection"
                        },
                        new
                        {
                            Id = 7,
                            Value = "Manga"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadedComicContentType", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.HasKey("ComicId");

                    b.ToTable("UploadedComicContentType");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadedComicFiction", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FictionId")
                        .HasColumnType("int");

                    b.HasKey("ComicId");

                    b.ToTable("UploadedComicFiction");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadedComicNonFiction", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NonFictionId")
                        .HasColumnType("int");

                    b.HasKey("ComicId");

                    b.ToTable("UploadedComicNonFiction");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UploadedComicTagType", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagTypeId")
                        .HasColumnType("int");

                    b.HasKey("ComicId");

                    b.ToTable("UploadedComicTagType");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialisations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.UserProfileAssets", b =>
                {
                    b.Property<Guid>("UserProfileAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileAssetId");

                    b.ToTable("UserProfileAssets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "1ba54582-b0f7-43f7-95b2-e9750fb282f3",
                            ConcurrencyStamp = "302ef608-6855-4b47-be16-b57f8d62c545",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "28cf989c-5fe1-4fad-a03f-5c21baa352e9",
                            ConcurrencyStamp = "5ed9cb4b-8f26-4564-a0c9-d66a9fd6d425",
                            Name = "Creator",
                            NormalizedName = "CREATOR"
                        });
                });

            modelBuilder.Entity("Cove.ClassLibrary.Model.ApplicationUserIdentity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUserIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
